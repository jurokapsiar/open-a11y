(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{YMzb:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return a})),t.d(n,"default",(function(){return b}));t("rzGZ"),t("Dq+y"),t("8npG"),t("Ggvi"),t("E5k/"),t("q1tI");var o=t("7ljp"),i=t("Bl7J");var a={},l={_frontmatter:a},c=i.a;function b(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,o,i={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,["components"]);return Object(o.b)(c,Object.assign({},l,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("h2",null,"Overview"),Object(o.b)("p",null,"This page is for testing different types of behaviors and the observations."),Object(o.b)("p",null,"Currently this is testing the built-in browser based ",Object(o.b)("inlineCode",{parentName:"p"},"<select>")," control"),Object(o.b)("h1",null,"Should ","<","option",">"," allow for interactive content ",Object(o.b)("a",{id:"optionelement-value"})),Object(o.b)("p",null,"If you have the following DOM structure, what is the value of the option?"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-_"}),'<select>\n   <option>\n      <div>Option 1</div>\n      <checkbox value="one" /> One\n   </option>\n   <option>\n      <div>Option 2</div>\n      <checkbox value="two" /> Two\n      <checkbox value="three" /> Three\n  </option>\n</select>\n')),Object(o.b)("h3",null,"Current behavior"),Object(o.b)("p",null,"The ",Object(o.b)("a",Object.assign({parentName:"p"},{href:"https://jsbin.com/fimelilako/edit?html,js,console,output"}),"current behavior")," takes the\ntext nodes of the children and creates the value from this and does not allow interactive content.\nThis is due to the DOM parsing removing everything but text nodes, but ultimately that is the end value."),Object(o.b)("p",null,"So for the following scenario:"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-_"}),"<option><div>This is</div> a checkbox</option>\n")),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"value")," is ",Object(o.b)("inlineCode",{parentName:"p"},"This is a checkbox"),". If we go back to our example above and use this same logic\nwhile under the assumption that the parser does not remove the non-text node elements we have:"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-_"}),'  \x3c!-- Value will be "Option 1 One" --\x3e\n  <option>\n    <div>Option 1</div>\n    <checkbox value="one" /> One\n  </option>\n\n  \x3c!-- Value will be "Option 2 Two Three" --\x3e\n  <option>\n    <div>Option 2</div>\n    <checkbox value="two" /> Two\n    <checkbox value="three" /> Three\n  </option>\n')),Object(o.b)("h3",null,"Proposed solution"),Object(o.b)("p",null,"We maintain that an ",Object(o.b)("inlineCode",{parentName:"p"},"<option>")," cannot contain additional interactive elements as this introduces many additional questions\nand opens the opportunity for poor UX (eg: two checkboxes within a single option). While someone may want something\nlike this it breaks the paradigm of what a ",Object(o.b)("inlineCode",{parentName:"p"},"<select>")," is meant to be."),Object(o.b)("h4",null,"Checkboxes are a common paradigm"),Object(o.b)("p",null,'The most common paradigm where there is an additional interactive element is\nwhen an option "contains" a checkbox. This can'),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"[OPEN QUESTION | TELEMETRY]")," Is HTML within an ",Object(o.b)("inlineCode",{parentName:"p"},"<option>")," a common paradigm today?"))}b.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-select-research-api-mdx-b64ea1072c9c0d765fb9.js.map