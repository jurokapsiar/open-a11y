{"version":3,"sources":["webpack:///./src/pages/select.research.api.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","id","isMDXComponent"],"mappings":"gRAMO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,kCACA,oGACA,6EAA4D,0BAAYC,WAAW,KAAvB,YAA5D,YACA,mFAAsE,iBAAGC,GAAG,yBAC5E,kGACA,uBAAK,kCAAMD,WAAW,OAAU,CAC5B,UAAa,eADZ,qPAcL,0CACA,4BAAW,+BAAGA,WAAW,KAAQ,CAC7B,KAAQ,6DADD,oBAAX,4NAKA,uDACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,eADZ,qDAIL,4BAAW,0BAAYA,WAAW,KAAvB,SAAX,OAAoE,0BAAYA,WAAW,KAAvB,sBAApE,gKAEA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,eADZ,yTAeL,2CACA,4CAA2B,0BAAYA,WAAW,KAAvB,YAA3B,iQAEyC,0BAAYA,WAAW,KAAvB,YAFzC,oBAGA,0DACA,qJAEA,qBAAG,sBAAQA,WAAW,KAAnB,+BAAH,sBAAyF,0BAAYA,WAAW,KAAvB,YAAzF,8BAKJJ,EAAWM,gBAAiB","file":"component---src-pages-select-research-api-mdx-b64ea1072c9c0d765fb9.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/juro/projects/open-a11y/research/src/components/layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2>{`Overview`}</h2>\n    <p>{`This page is for testing different types of behaviors and the observations.`}</p>\n    <p>{`Currently this is testing the built-in browser based `}<inlineCode parentName=\"p\">{`<select>`}</inlineCode>{` control`}</p>\n    <h1>{`Should `}{`<`}{`option`}{`>`}{` allow for interactive content `}<a id=\"optionelement-value\"></a></h1>\n    <p>{`If you have the following DOM structure, what is the value of the option?`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-_\"\n      }}>{`<select>\n   <option>\n      <div>Option 1</div>\n      <checkbox value=\"one\" /> One\n   </option>\n   <option>\n      <div>Option 2</div>\n      <checkbox value=\"two\" /> Two\n      <checkbox value=\"three\" /> Three\n  </option>\n</select>\n`}</code></pre>\n    <h3>{`Current behavior`}</h3>\n    <p>{`The `}<a parentName=\"p\" {...{\n        \"href\": \"https://jsbin.com/fimelilako/edit?html,js,console,output\"\n      }}>{`current behavior`}</a>{` takes the\ntext nodes of the children and creates the value from this and does not allow interactive content.\nThis is due to the DOM parsing removing everything but text nodes, but ultimately that is the end value.`}</p>\n    <p>{`So for the following scenario:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-_\"\n      }}>{`<option><div>This is</div> a checkbox</option>\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{` is `}<inlineCode parentName=\"p\">{`This is a checkbox`}</inlineCode>{`. If we go back to our example above and use this same logic\nwhile under the assumption that the parser does not remove the non-text node elements we have:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-_\"\n      }}>{`  <!-- Value will be \"Option 1 One\" -->\n  <option>\n    <div>Option 1</div>\n    <checkbox value=\"one\" /> One\n  </option>\n\n  <!-- Value will be \"Option 2 Two Three\" -->\n  <option>\n    <div>Option 2</div>\n    <checkbox value=\"two\" /> Two\n    <checkbox value=\"three\" /> Three\n  </option>\n`}</code></pre>\n    <h3>{`Proposed solution`}</h3>\n    <p>{`We maintain that an `}<inlineCode parentName=\"p\">{`<option>`}</inlineCode>{` cannot contain additional interactive elements as this introduces many additional questions\nand opens the opportunity for poor UX (eg: two checkboxes within a single option). While someone may want something\nlike this it breaks the paradigm of what a `}<inlineCode parentName=\"p\">{`<select>`}</inlineCode>{` is meant to be.`}</p>\n    <h4>{`Checkboxes are a common paradigm`}</h4>\n    <p>{`The most common paradigm where there is an additional interactive element is\nwhen an option \"contains\" a checkbox. This can`}</p>\n    <p><strong parentName=\"p\">{`[OPEN QUESTION | TELEMETRY]`}</strong>{` Is HTML within an `}<inlineCode parentName=\"p\">{`<option>`}</inlineCode>{` a common paradigm today?`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}