{"version":3,"sources":["webpack:///./src/pages/show-test-run.js"],"names":["ShowTestRunInternal","state","name","component","variantName","run","testKey","mode","scenarios","environment","scenariosDefinition","getComponentTestScenarios","map","scenario","key","title","style","padding","margin","background","browser","browserVersion","reader","readerVersion","index","description","expected","passed","narration","notes","ShowTestRun","location"],"mappings":"0KAWMA,EAAsB,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACrBC,EAAqDD,EAArDC,KAAMC,EAA+CF,EAA/CE,UAAWC,EAAoCH,EAApCG,YAAaC,EAAuBJ,EAAvBI,IAAKC,EAAkBL,EAAlBK,QAASC,EAASN,EAATM,KAC5CC,EAA2BH,EAA3BG,UAAWC,EAAgBJ,EAAhBI,YAEbC,EAAsB,GAC5BC,YAA0BR,EAAWC,EAAaG,GAAMK,KACtD,SAACC,GAAD,OAAeH,EAAoBG,EAASC,KAAOD,KAGrD,IAAME,EAAK,YAAeb,EAAf,IAAuBC,EAElC,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KAAQ,+BAAQY,IAChB,4BAAKA,GACL,yBAAKC,MAAO,CAAEC,QAAS,QAASC,OAAQ,QAASC,WAAY,SAC3D,yCAAef,GACf,0CAAgBE,GAChB,6CACgBG,EAAYW,QAD5B,IACsCX,EAAYY,eADlD,MACqEZ,EAAYa,OAAQ,IACtFb,EAAYc,gBAGjB,+BACE,+BACE,wBAAIT,IAAI,QACN,2CACA,wCACA,sCACA,yCACA,uCAGJ,+BACGN,EAAUI,KAAI,SAACC,EAAUW,GAAX,OACb,wBAAIV,IAAKU,GACP,wBAAIV,IAAI,eAAeJ,EAAoBG,EAASC,KAAKW,aACzD,wBAAIX,IAAI,YAAYJ,EAAoBG,EAASC,KAAKY,UACtD,wBAAIZ,IAAI,UAAUD,EAASc,OAAS,SAAW,UAC/C,wBAAIb,IAAI,YAAYD,EAASe,WAC7B,wBAAId,IAAI,SAASD,EAASgB,eASzBC,UAtDK,SAAC,GAAkB,IAC7B7B,EAD4B,EAAf8B,SACb9B,MACR,OAAOA,EAAQ,kBAACD,EAAD,CAAqBC,MAAOA,IAAY","file":"component---src-pages-show-test-run-js-27f9eac32c432a051983.js","sourcesContent":["import React from 'react'\n\nimport { getComponentTestScenarios } from '../sources'\nimport Layout from '../components/layout'\nimport { Helmet } from 'react-helmet'\n\nconst ShowTestRun = ({ location }) => {\n  const { state } = location\n  return state ? <ShowTestRunInternal state={state} /> : <div>Error: state not defined</div>\n}\n\nconst ShowTestRunInternal = ({ state }) => {\n  const { name, component, variantName, run, testKey, mode } = state\n  const { scenarios, environment } = run\n\n  const scenariosDefinition = {}\n  getComponentTestScenarios(component, variantName, mode).map(\n    (scenario) => (scenariosDefinition[scenario.key] = scenario),\n  )\n\n  const title = `Test run ${name} ${component}`\n\n  return (\n    <Layout>\n      <Helmet><title>{title}</title></Helmet>\n      <h1>{title}</h1>\n      <div style={{ padding: '.5rem', margin: '.5rem', background: '#eee' }}>\n        <div>Variant: {variantName}</div>\n        <div>Test key: {testKey}</div>\n        <div>\n          Environment: {environment.browser} {environment.browserVersion} / {environment.reader}{' '}\n          {environment.readerVersion}\n        </div>\n      </div>\n      <table>\n        <thead>\n          <tr key=\"head\">\n            <th>Description</th>\n            <th>Expected</th>\n            <th>Status</th>\n            <th>Narration</th>\n            <th>Notes</th>\n          </tr>\n        </thead>\n        <tbody>\n          {scenarios.map((scenario, index) => (\n            <tr key={index}>\n              <td key=\"description\">{scenariosDefinition[scenario.key].description}</td>\n              <td key=\"expected\">{scenariosDefinition[scenario.key].expected}</td>\n              <td key=\"status\">{scenario.passed ? 'PASSED' : 'FAILED'}</td>\n              <td key=\"naration\">{scenario.narration}</td>\n              <td key=\"notes\">{scenario.notes}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </Layout>\n  )\n}\n\nexport default ShowTestRun\n"],"sourceRoot":""}